{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAEI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAMlB,SAEI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,a,+BCRjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGdC,EAHc,0FAG2EC,UAAUH,GAHrF,sBAIDI,MAAMF,GAJL,cAIdG,EAJc,gBAKGA,EAAKC,OALR,uBAKZC,EALY,EAKZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXtB,kBAebM,GAfa,4CAAH,sDCCRO,EAAc,SAAC,GAAmB,EAAlBJ,GAAmB,IAAhBC,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGlC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAKgB,IAAKN,IACrB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAItB,ECNwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAIGqB,EDjBsBK,CAAa1B,GAA9ByB,EAAZ,EAAOlB,KAAWa,EAAlB,EAAkBA,QAGlB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,uCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEKS,EAAKhB,KAAI,SAAAC,GAAG,OACT,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEclBgB,EA/BM,WAGjB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAACT,GAAD,OACZ,cAAC,EAAD,CAEAA,SAAYA,GADPA,YCdd6B,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBP,MAAK,YAAkD,IAA/CQ,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2a374f21.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport  PropTypes  from \"prop-types\";\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) =>{\n        \n        setInputValue(e.target.value);\n\n    }\n\n    const handleSubmit = (e) =>{\n        e.preventDefault();\n        if (inputValue.trim().length >2) {\n            setCategories(cats => [inputValue,...cats]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        \n        <form onSubmit={handleSubmit}>\n        \n            <input \n                type='text'\n                value={inputValue}\n                onChange={ handleInputChange}\n            />\n        </form>\n        \n        \n    )\n}\n\n\nAddCategory.propTypes ={\n    setCategories: PropTypes.func.isRequired\n}","\n export const getGifs = async (category) => {\n\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=8zjuCy32hDfTC7eh1Pd7eVfnpgr6vIA2&q=${encodeURI(category)}&limit=10`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n\n}","import React from 'react'\n\nexport const GifGridItem = ({id,title,url}) => {\n\n    \n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src ={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\nexport const GifGrid = ({ category }) => {\n\n    \n\n    const {data:imgs, loading} = useFetchGifs(category);\n\n    \n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{category}</h3>\n\n            {loading && <p className='ard animate__animated animate__flash'>Loading</p>}\n            \n            <div className='card-grid'>\n\n                {imgs.map(img =>\n                    <GifGridItem\n                        key={img.id}\n                        {...img}\n                    />\n                )}\n\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            });\n\n    }, [category]);\n\n\n\n    return state;\n}","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\n\nconst GifExpertApp = () =>{\n\n\n    const [categories, setCategories] = useState(['One Piece']);\n\n    // const handleAdd = () => {\n    //     // setCategories( ['HunterXHunter',...categories] );\n    //     setCategories(cats => [...cats,'HunterXHunter'])\n    // }\n\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories= {setCategories}/>\n            <hr/>\n\n            <ol>\n                { \n                    categories.map( (category) =>\n                        <GifGrid \n                        key={category}\n                        category = {category} \n                        />\n                    )\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}